syntax = "proto3";
package message;

/// message content type
enum ContentType {
  Default = 0;
  Text = 1;
  Image = 2;
  Video = 3;
  File = 4;
  Emoji = 5;
  Audio = 6;
  VideoCall = 7;
  AudioCall = 8;
}

/// message wrapper
/// because of the protobuf syntax limited
message Msg {
  string send_id = 1;
  string receiver_id = 2;
  string local_id = 3;
  string server_id = 4;
  // timestamp
  int64 send_time = 5;
  int64 seq = 6;
  oneof data {
    // single message
    Single single = 7;

    // response, indicates that the server received the message
    MsgResponse response = 8;

    // group message related
    Single group_msg = 9;
    GroupInvitation group_invitation = 10;
    UserAndGroupID group_member_exit = 11;
    string group_dismiss = 12;
    GroupInfo group_update = 13;
    UserAndGroupID group_dismiss_or_exit_received = 14;
    UserAndGroupID group_invitation_received = 15;

    /// single call related
    SingleCallInvite single_call_invite = 16;
    SingleCallInviteAnswer single_call_invite_answer = 17;
    SingleCallInviteNotAnswer single_call_invite_not_answer = 18;
    SingleCallInviteCancel single_call_invite_cancel = 19;
    SingleCallOffer single_call_offer = 20;
    Hangup hangup = 21;
    AgreeSingleCall agree_single_call = 22;
    Candidate candidate = 23;

    // message read, maybe don't need
    MsgRead message_read = 24;

  }
}

message MsgRead{
  string msg_id = 1;
  string user_id = 2;
  string seq = 3;
}

message Candidate{
  string candidate = 1;
  optional string sdp_mid = 2;
  optional int32 sdp_m_index = 3;
}

enum SingleCallInviteType {
  SingleAudio = 0;
  SingleVideo = 1;
}

message AgreeSingleCall{
  string sdp = 1;
}

message SingleCallInvite {
  SingleCallInviteType invite_type = 1;
}

message SingleCallInviteAnswer {
  bool agree = 1;
  SingleCallInviteType invite_type = 2;
}

message SingleCallInviteNotAnswer {
  SingleCallInviteType invite_type = 1;
}

message SingleCallInviteCancel {
  SingleCallInviteType invite_type = 2;
}

message SingleCallOffer {
  string sdp = 1;
}

message Hangup {
  SingleCallInviteType invite_type = 1;
  int64 sustain = 2;
}

message MsgToDb {
  string send_id = 1;
  string receiver_id = 2;
  string local_id = 3;
  string server_id = 4;
  // timestamp
  int64 send_time = 5;
  ContentType content_type = 6;
  string content = 7;
  int64 seq = 8;
}

/// use to send single message or group message;
/// message ws is used to connect the client by websocket;
/// and it receive message from clients; then send message to mq;
/// so only provide the send message function for other rpc service;
message Single {
  // message content
  string content = 2;
  // message type
  ContentType content_type = 3;
}


/// group message wrapper;
/// because of the grpc proto syntax limited
/// we need use oneof to wrap the message;
//message GroupMsgWrapper{
//  oneof group_msg {
//    Single message = 1;
//    GroupInvitation invitation = 2;
//    UserAndGroupID member_exit = 3;
//    string dismiss = 4;
//    UserAndGroupID dismiss_or_exit_received = 5;
//    UserAndGroupID invitation_received = 6;
//  }
//}

/// user and group id
message UserAndGroupID{
  string user_id = 1;
  string group_id = 2;
}

/// group invitation include group information and group member information
message GroupInvitation{
  GroupInfo info = 1;
  repeated GroupMember members = 2;
}

/// group information also related to database
message GroupInfo {
  string id = 1;
  string owner = 2;
  string name = 3;
  string avatar = 4;
  string description = 5;
  string announcement = 6;
  int64 create_time = 7;
  int64 update_time = 8;
}

/// group member information also related to database table group_members
message GroupMember {
  int64 id = 1;
  int32 age = 2;
  string group_id = 3;
  string user_id = 4;
  string group_name = 5;
  string avatar = 6;
  int64 joined_at = 7;
  optional string region = 8;
  string gender = 9;
}

/// create group object
message GroupCreate{
  string id = 1;
  string owner = 2;
  string avatar = 3;
  string group_name = 4;
  repeated string members_id = 5;
}

message SendMsgRequest {
  Msg message = 1;
}

message SendGroupMsgRequest {
  Msg message = 1;
  repeated string members_id = 2;
}

message SendMsgResponse {}

message MsgResponse {
  string local_id = 1;
  string server_id = 2;
  int64  send_time = 3;
  string err = 4;
}

service MsgService {
  // send message through rpc
  rpc SendMessage(SendMsgRequest) returns (SendMsgResponse);
  // send single message to user by websocket
  rpc SendMsgToUser(SendMsgRequest) returns (SendMsgResponse);
  // send group message to user by websocket
  rpc SendGroupMsgToUser(SendGroupMsgRequest) returns (SendMsgResponse);
}

/// chat service, receive message then generate message id and send message to mq;
/// response operation result;
service ChatService {
  rpc SendMsg(SendMsgRequest) returns (MsgResponse);
}

message SaveMessageRequest {
  MsgToDb message = 1;
}

message SaveMessageResponse {}

message GetDbMsgRequest {
  string user_id = 1;
  int64 start = 2;
  int64 end = 3;
}

message GroupCreateRequest {
  GroupCreate group = 1;
}

message GroupCreateResponse {
  GroupInvitation invitation = 1;
}

message GroupUpdate{
  string id = 1;
  string name = 2;
  string avatar = 3;
  string description = 4;
  string announcement = 5;
  int64 update_time = 6;
}

message GroupUpdateRequest {
  GroupUpdate group = 1;
}

message GroupUpdateResponse {
  GroupInfo group = 1;
}

message GroupDeleteRequest {
  string group_id = 1;
  string user_id = 2;
}

message GroupDeleteResponse {
  repeated string members_id = 1;
}

message GroupMemberExitResponse {
  repeated string members_id = 1;
}

message GroupMembersIdRequest {
  string group_id = 1;
}

message GroupMembersIdResponse {
  repeated string members_id = 1;
}

/// db interface think about if it is necessary to put api interface together.
service DbService {
  /// save message to postgres and mongodb
  rpc SaveMessage(SaveMessageRequest) returns (SaveMessageResponse);
  /// query message from mongodb by start seq to end seq
  rpc GetMessages(GetDbMsgRequest) returns (stream MsgToDb);
  /// create group
  rpc GroupCreate(GroupCreateRequest) returns (GroupCreateResponse);
  /// update group
  rpc GroupUpdate(GroupUpdateRequest) returns (GroupUpdateResponse);
  /// delete group
  rpc GroupDelete(GroupDeleteRequest) returns (GroupDeleteResponse);
  /// member exit
  rpc GroupMemberExit(UserAndGroupID) returns (GroupMemberExitResponse);
  /// query group members id
  rpc GroupMembersId(GroupMembersIdRequest) returns (GroupMembersIdResponse);
}

service PushService {
  rpc PushMsg(SendMsgRequest) returns (SendMsgResponse);
}
