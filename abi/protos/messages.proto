syntax = "proto3";
package msg;

/// message content type
enum ContentType {
    Default = 0;
    Text = 1;
    Image = 2;
    Video = 3;
    File = 4;
    Emoji = 5;
    Audio = 6;
    VideoCall = 7;
    AudioCall = 8;
}

/// message wrapper
/// because of the protobuf syntax limited
message MsgWrapper{
  oneof msg{
    Single single = 1;
    GroupMsgWrapper group = 2;
  }
}

/// use to send single message or group message;
/// message ws is used to connect the client by websocket;
/// and it receive message from clients; then send message to mq;
/// so only provide the send message function for other rpc service;
message Single {
  // unique id
  string msg_id = 1;
  // message content
  string content = 2;
  // message type
  ContentType content_type = 3;
  // from
  string send_id = 4;
  // to
  string receiver_id = 5;
  // timestamp
  int64 create_time = 6;
}


/// group message wrapper;
/// because of the grpc proto syntax limited
/// we need use oneof to wrap the message;
message GroupMsgWrapper{
  oneof group_msg {
    Single message = 1;
    GroupInvitation invitation = 2;
    UserAndGroupID member_exit = 3;
    string dismiss = 4;
    UserAndGroupID dismiss_or_exit_received = 5;
    UserAndGroupID invitation_received = 6;
  }
}

/// user and group id
message UserAndGroupID{
  string user_id = 1;
  string group_id = 2;
}

/// group invitation include group information and group member information
message GroupInvitation{
  GroupInfo info = 1;
  repeated GroupMember members = 2;
}

/// group information also related to database
message GroupInfo {
  int64 id = 1;
  string owner = 2;
  string name = 3;
  string avatar = 4;
  string description = 5;
  string announcement = 6;
  int64 member_count = 7;
  int64 create_time = 8;
  int64 update_time = 9;
}

/// group member information also related to database table group_members
message GroupMember {
  int64 id = 1;
  int32 age = 2;
  string group_id = 3;
  string user_id = 4;
  string group_name = 5;
  string avatar = 6;
  int64 joined_at = 7;
  optional string region = 8;
  string gender = 9;
}

/// create group object
message GroupCreate{
  string id = 1;
  string owner = 2;
  string avatar = 3;
  string group_name = 4;
  repeated string members_id = 5;
}

message SendMsgRequest {
  MsgWrapper message = 1;
}

message SendMsgResponse {}

service MsgService {
  // send message through rpc
  rpc SendMessage(SendMsgRequest) returns (SendMsgResponse);
}


message GroupCreateRequest {
  GroupCreate group = 1;
}


message GroupCreateResponse {
  GroupInvitation invitation = 1;
}


service GroupService {
  rpc GroupCreate(GroupCreateRequest) returns (GroupCreateResponse);
}
